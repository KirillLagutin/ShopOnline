@page "/Cart"

@inject IShopClient ShopClient
@inject IToastService ToastService

<PageTitle>Корзина</PageTitle>

<h3 class="mb-5">
    Корзина
    <button class="btn btn-primary" @onclick="@(ClearCart)">
        <b>Очистить корзину</b>
    </button>
</h3>

@if (CartItems != null)
{
    var cartItemsCount = CartItems.Count();

    if (cartItemsCount > 0)
    {
        const int itemsPerRow = 3;

        for (int i = 0; i < cartItemsCount; i++)
        {
            var cartItemRowList = CartItems
                .Skip(i * itemsPerRow)
                .Take(itemsPerRow)
                .ToList();

            <div class="row mt-3">
                @foreach (var item in cartItemRowList)
                {
                    <div class="col-md-4 mb-4">
                        <DeletingItem Product="@Products?.First(p=>p.Id == item.ProductId)"/>
                        
                        <button class="btn btn-primary"
                                @onclick="@(() => DeleteProductFromCart(item.Id))">
                            <b>Удалить из корзины</b>
                        </button>
                    </div>
                }
            </div>
        }
    }
}
else
{
    <LoadingIcon/>
}

@code {
    private IEnumerable<CartItem>? CartItems { get; set; }
    private IEnumerable<Product>? Products { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CartItems = await ShopClient.GetCartItems();
        Products = await ShopClient.GetProducts();
    }

    private async Task DeleteProductFromCart(Guid id)
    {
        await ShopClient.DeleteCartItem(id);

        ToastService.ShowInfo("Товар удалён из корзины");
    }

    private async Task ClearCart()
    {
        await ShopClient.ClearCart();

        ToastService.ShowInfo("Корзина очищена");
    }
}