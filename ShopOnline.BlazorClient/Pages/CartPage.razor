@page "/Cart"

@inject IShopClient ShopClient
@inject IToastService ToastService

<PageTitle>Корзина</PageTitle>

<h3 class="mb-5">Корзина</h3>

@if (CartItems != null)
{
    var productCount = CartItems.Count();

    if (productCount > 0)
    {
        const int itemsPerRow = 3;

        for (int i = 0; i < productCount; i++)
        {
            var productRowList = CartItems
                .Skip(i * itemsPerRow)
                .Take(itemsPerRow)
                .ToList();
            
            <div class="row mt-3">
                @foreach (var item in productRowList)
                {
                    <div class="col-md-4 mb-4">
                        <NavLink class="nav-link" href="Cart">
                            <div class="card">
                                <div class="card-body">
                                    <h5 class="card-title mb-3">
                                        @item.Id
                                    </h5>
                                    <h5 class="card-title mb-3">
                                        @item.ProductId
                                    </h5>
                                    <h5 class="card-title mb-3">
                                        @item.Quantity
                                    </h5>
                                </div>
                            </div>
                        </NavLink>
                        <button class="btn btn-primary"
                                @onclick="@(() => DeleteProductFromCart(@item.Id))">
                            <b>Удалить из корзины</b>
                        </button>
                    </div>
                }
            </div>
        }
        
        <div class="row-cols-2">
            <button class="btn btn-primary"
                    @onclick="@(() => ClearCart())">
                <b>Очистить корзину</b>
            </button>
        </div>
    }
}
else
{
    <LoadingIcon/>
}

@code {
    public IEnumerable<CartItem>? CartItems { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        CartItems = await ShopClient.GetCartItems();
    }
    
    private void DeleteProductFromCart(Guid id)
    {
        var cartItem = CartItems.First(c => c.Id == id);

        ToastService.ShowInfo("Add to cart product: " +
            $"{CartItems.First(c=>c.Id == id).Quantity}");
    }

    private void ClearCart()
    {
        
    }
}